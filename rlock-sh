#!/usr/bin/env bash

set -e

if [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
    echo "This script requires bash version 4+"
    exit 1
fi


RANDOM_TOKEN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

# Defaults
REDIS_HOST=${REDIS_HOST:-127.0.0.1}
REDIS_PORT=${REDIS_PORT:-6379}
REDIS_DB=${REDIS_DB:-}
REDIS_AUTH=${REDIS_AUTH:-}
REDIS_CON_MAX_RETRY=${REDIS_CON_MAX_RETRY:-60}

LOCK_KEY=${LOCK_KEY:-rlock-sh}
LOCK_TTL=${LOCK_TTL:-300}
LOCK_ACQUIRE_TIMEOUT=${LOCK_ACQUIRE_TIMEOUT:-150}
LOCK_ACQUIRE_SLEEP=${LOCK_ACQUIRE_SLEEP:-1}

VERBOSE=''

NAME=$(basename $0)

function show-usage {
  cat <<EOF
Usage:

  rlock-sh [OPTIONS...] [CMD] [CMD OPTIONS...]
  rlock-sh [OPTIONS...] -- [CMD] [CMD OPTIONS...]

  Acquire lock by creating key in Redis using NX flag. After acquiring lock execure CMD.
  When CMD finishes then lock is released by removing key.

Options:

  -h|--help                 Show this usage help
  -v|--verbose              Print debug information on stderr

  -l|--lock-name=LOCK_KEY   (string) Name of the key that will be created (default: $LOCK_KEY)
  -t|--lock-ttl=LOCK_TTL    (int) Number of seconds for lock TTL (default: $LOCK_TTL)

  -H|--host=REDIS_HOST      (string) Redis host name or ip (default: $REDIS_HOST)
  -p|--port=REDIS_PORT      (int) Redis TCP port (default: $REDIS_PORT)
  -d|--database=REDIS_DB    (int) Redis database to select (default: none)
  -a|--auth=REDIS_AUTH      (string) Redis authentication (default: none)

  -r|--connect-max-retry=REDIS_CON_MAX_RETRY
                            (int) Maximum number of connection attempts (default: $REDIS_CON_MAX_RETRY)

  -T|--acquire-timeout=LOCK_ACQUIRE_TIMEOUT
                            (int) Temeout for acquiring lock in seconds (default: $LOCK_ACQUIRE_TIMEOUT)

  -S|--acquire-sleep=LOCK_ACQUIRE_SLEEP
                            (int|float) Time in second to sleep betwean lock acquire retries
                            (default: $LOCK_ACQUIRE_SLEEP)
                            Not on every system \`sleep\` command can receive fraction.
                            See man pages for sleep on your system.

Majority of options can be set by environment variables.
Here is the list (compare that with options above):

  - REDIS_HOST
  - REDIS_PORT
  - REDIS_DB
  - REDIS_AUTH
  - REDIS_CON_MAX_RETRY
  - LOCK_KEY
  - LOCK_TTL
  - LOCK_ACQUIRE_TIMEOUT
  - LOCK_ACQUIRE_SLEEP

EOF
}


shortoptions='+l:t:H:p:d:a:r:T:S:vh'
longoptions_list=(
  'lock-name:'
  'lock-ttl:'
  'host:'
  'port:'
  'database:'
  'auth:'
  'connect-max-retry:'
  'acquire-timeout:'
  'acquire-sleep:'
  'verbose'
  'help'
)

longoptions=$(printf ",%s" ${longoptions_list[@]})

if ! options=$(getopt \
    --name="$NAME" \
    --shell=bash \
    --options="$shortoptions" \
    --longoptions="${longoptions:1}" \
    -- "$@" )
then
    show-usage >&2
    exit 1
fi

eval set -- "$options"

while true; do
  case "$1" in
    -l|--lock-name)
      LOCK_KEY="$2"
      shift 2
      continue;;

    -t|--lock-ttl)
      LOCK_TTL="${2}"
      shift 2
      continue;;

    -H|--host)
      REDIS_HOST="$2"
      shift 2
      continue;;

    -p|--port)
      REDIS_PORT="$2"
      shift 2
      continue;;

    -d|--database)
      REDIS_DB="$2"
      shift 2
      continue;;

    -a|--auth)
      REDIS_AUTH="$2"
      shift 2
      continue;;

    -r|--connect-max-retry)
      REDIS_CON_MAX_RETRY="$2"
      shift 2
      continue;;

    -T|--acquire-timeout)
      LOCK_ACQUIRE_TIMEOUT="$2"
      shift 2
      continue;;

    -S|--acquire-sleep)
      LOCK_ACQUIRE_SLEEP="$2"
      shift 2
      continue;;

    -v|--verbose)
      VERBOSE=1
      shift
      continue;;

    -h|--help)
      show-usage
      exit;;

    --)
      shift
      break;;

    *)
      echo "rlock-sh: Error unknow option '$1'" >&2
      echo >&2
      show-usage >&2
      exit 1;;
  esac
done


if [ -z "$REDIS_HOST" ]; then
  echo "rlock-sh: INPUT ERROR host cannot be empty!" >&2
  exit 1
fi

if [ -z "$REDIS_PORT" ]; then
  echo "rlock-sh: INPUT ERROR port cannot be empty!" >&2
  exit 1
fi

if [ -z "$REDIS_CON_MAX_RETRY" ] || [ "$REDIS_CON_MAX_RETRY" -le 0 ]; then
  echo "rlock-sh: INPUT ERROR connection max retry must be greater than zero!" >&2
  exit 1
fi

if [ -z "$LOCK_KEY" ]; then
  echo "rlock-sh: INPUT ERROR lock key name cannot be empty!" >&2
  exit 1
fi

if [ -z "$LOCK_TTL" ] || [ "$LOCK_TTL" -le 0 ]; then
  echo "rlock-sh: INPUT ERROR lock TTL (seconds) must be positive!" >&2
  exit 1
fi

if [ -z "$LOCK_ACQUIRE_TIMEOUT" ] || [ "$LOCK_ACQUIRE_TIMEOUT" -lt 0 ]; then
  echo "rlock-sh: INPUT ERROR lock acquire timeout (seconds) must be non negative!" >&2
  exit 1
fi

if [ -z "$LOCK_ACQUIRE_SLEEP" ] || [ "${LOCK_ACQUIRE_SLEEP:0:1}" = "-" ]; then
  echo "rlock-sh: INPUT ERROR lock acquire sleep (seconds) must be non negative!" >&2
  exit 1
fi




function redis-cmd {
  local fd=$1
  shift;

  if [ ${#} -eq 0 ]; then
    echo "rlock-sh: Error, expected arguments for redis-cmd and none given!"
    exit 1
  fi

  local arguments=( "${@}" )
  local command=("*$[${#arguments[@]}]")

  for ((i=0;i<${#arguments[@]};i++)); do
    command=( "${command[@]}" "\$${#arguments[${i}]}" "${arguments[${i}]}" )
  done


  printf "%s\r\n" "${command[@]}" >&${fd}

  if ! redis-read $fd; then
    return 1
  fi
}

function redis-read {
  local fd=$1
  local result
  local i

  read -r -u ${fd}

  if [ ${#REPLY} -eq 0 ]; then
      echo "ERROR: no reply" >&2
      exit 1
  fi

  REPLY=${REPLY:0:${#REPLY}-1}

  case ${REPLY} in
    :*) # integer
      result=( "${REPLY:1}" )
      ;;

    +*) # message
      result=( "${REPLY:1}" )
      ;;

    # error
    -*|\$-*)
      echo "${REPLY:1}"
      return 1
      ;;

    # message size
    \$*)
      if [ ${REPLY:1} -gt 0 ]; then
        # read message when size non-zero
        read -r -N $[${REPLY:1}+2] -u "${fd}"
      fi

      result=( "${REPLY:0:(-2)}" )
      ;;

    \**)
      echo "flock-sh: ERROR bulk reply not supported"
      exit 1
      ;;

    *)
      echo "rlock-sh: ERROR cannot parse response!"
      exit 1
      ;;
  esac

  printf "%s\n" "${result[@]}"
}


function acquire-lock {
  local fd=$1
  local start_time=$(date +%s)
  local time_trying=0
  local lock_ttl_mili=$(( LOCK_TTL * 1000 ))

  if [ -n "$VERBOSE" ]; then
    echo "rlock-sh: acquiring lock ($LOCK_KEY=$RANDOM_TOKEN)" >&2
  fi

  while [ $LOCK_ACQUIRE_TIMEOUT -eq 0 ] || [ $time_trying -lt $LOCK_ACQUIRE_TIMEOUT ]; do

    # Acquire lock by creating key with SET using NX flag which fails if key already exists
    response=$(redis-cmd $fd SET $LOCK_KEY $RANDOM_TOKEN NX PX $lock_ttl_mili)

    if [ "$response" = "OK" ]; then
      # success!
      current_time=$(date +%s)
      time_trying=$(( current_time - start_time ))

      if [ -n "$VERBOSE" ];then
        echo "rlock-sh: lock acquired after $time_trying seconds" >&2
      fi

      # true
      return 0
    fi

    sleep "$LOCK_ACQUIRE_SLEEP"

    current_time=$(date +%s)
    time_trying=$(( current_time - start_time ))
  done

  if [ -n "$VERBOSE" ]; then
    echo "rlock-sh: ERROR acquire lock timeout" >&2
  fi
  return 1;
}


function release-lock {
  local fd=$1

  if [ -n "$VERBOSE" ]; then
    echo "rlock-sh: releasing lock" >&2
  fi

  # This Lua script deletes lock key only if it holds
  # specified value (rnadom token).
  # We do that to avoid deleting lock created by others.
  local lock_release_script='
    if redis.call("get",KEYS[1]) == ARGV[1] then
      return redis.call("del",KEYS[1])
    else
        return 0
    end
  '

  redis-cmd $fd EVAL "$lock_release_script" 1 $LOCK_KEY $RANDOM_TOKEN > /dev/null
  # tell server that we are finishing
  redis-cmd $fd QUIT > /dev/null
  # close the connection
  exec 6>&-
}




# Connect to Redis and andauthorize if needed

connection_attempts=0
until exec 4<>/dev/tcp/"$REDIS_HOST"/"$REDIS_PORT"; do
    connection_attempts=$(( connection_attempts + 1 ))

    if [ $connection_attempts -ge $REDIS_CON_MAX_RETRY ]; then
        exit 1
    fi

    sleep 1
done


if [ "${REDIS_AUTH}" != "" ]; then
    if [ -n "$VERBOSE" ]; then
      echo "rlock-sh: authenticating"
    fi

    if ! response=$(redis-cmd 4 AUTH "$REDIS_AUTH"); then
      echo "rlock-sh: $response" >&2
      exit 1
    fi
fi

if [ "${REDIS_DB}" != "" ]; then
    if [ -n "$VERBOSE" ]; then
      echo "rlock-sh: select db '$REDIS_DB'"
    fi

    if ! response=$(redis-cmd 4 SELECT "$REDIS_DB"); then
      echo "rlock-sh: $response" >&2
      exit 1
    fi
fi


if acquire-lock 4; then
  # ensure that we always try to release lock no mather what
  trap "release-lock 4" EXIT

  # execute commands
  "$@"
fi



